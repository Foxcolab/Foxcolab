// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}
enum Role {
  admin
  user
  bot
}
enum MemberRole {
  admin
  moderator
  guest
  user
  bot
}
enum Status {
  active
  inactive
}
enum Type {
  public
  private
}
enum LaterStatus {
  progress
  archived
  completed
}
enum Level {
  easy
  medium
  hard
}
enum SchemaRole {
  admin
  manager
  member // schema Member
  serverMember
  guest // outsider or visitor 
}

enum BotTriggeredType {
  fullText
  specificText
}

enum PollType {
  singleChoice
  multipleChoice
}

enum FieldType {
  shortAns
  longAns
  singleChoice
  multipleChoice
  select
  file

}

enum tableType {
  readOnly
  editable
}

enum ColumnType {
  shortText
  longText
  date 
  status
  person 
  number
  email
  checkbox
  rating
  vote
  progress
  dropdown
  link
  file
}




model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String? 
  bio          String?
  profilePic   String?
  displayPic    UploadedFile[]
  email        String        @unique
  otp          Int?
  otpGenerate  DateTime?
  role         Role           @default(user)
  googleId     String?
  appleId      String?
  githubId     String?
  verified     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt   DateTime @updatedAt
  password     String?
  // subscription Subscription[]
  resetTokenExpiryIn   DateTime? 
  servers      Server[]
  sections     Section[]
  // channels     Channel[]
  memebers     Member[]
  // canvases     Canvas[]
  // groups        Group[]
  // forums        ForumsChannel[]
  // testChannels    TestChannel[]

}
model Server {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  name String
  description String?
  type Type @default(public)
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayPicId String? @db.ObjectId
  displayPicture UploadedFile? @relation("DisplayPictures", fields: [displayPicId], references: [id], onDelete:NoAction, onUpdate:NoAction)
  coverPicId String? @db.ObjectId
  coverPic  UploadedFile? @relation("CoverPictures", fields: [coverPicId], references: [id], onDelete:NoAction, onUpdate:NoAction)
  createdBy   String  @db.ObjectId
  createdUser    User?    @relation(fields: [createdBy], references: [id], onDelete:Cascade)
  inviteCode String?
  defaultOpen String?
  defaultNotification String?
  serverType String?
  discoverable  Boolean? @default(false)

  whoCanUpdateServer    MemberRole   @default(moderator)
  whoCanKickMember      MemberRole   @default(admin)
  whoManageGroups       MemberRole   @default(moderator)
  whoCreateSection      MemberRole   @default(user)
  whoCreateChannel      MemberRole   @default(user)
  whoCreateForum        MemberRole   @default(user)
  whoCreateCanvas       MemberRole   @default(user)
  whoCreateTestChannel  MemberRole   @default(user)
  whoCreateSpreadsheet  MemberRole   @default(user)
  whoCreateBotResponse  MemberRole   @default(user)
  whoCanInviteMember    MemberRole   @default(user)

  sections Section[]
  channels Channel[]
  Members    Member[]
  results    Result[]
  tests      Test[]
  canvases    Canvas[]
  pinnedPost  PinnedPost[]
  saveLater  Later[]
  forums    Forums[]
  Reactions   Reaction[]
  channelManager      ChannelManager[] 
  canvasManager      canvasManager[] 
  forumManager      ForumManager[] 
  testChannelManager      TestChannelManager[] 
  // forumQuestions ForumQuestion[]
  forumsResponses  ForumResponse[]
  messages   Message[]
  groups     Group[]
  notes        Note[]
  threads      Threads[]
  TestChannels  TestChannel[]
  forumsChannel ForumsChannel[]
  Drafts    Draft[]
  noteComments NoteComment[]
  activityLogs ActivityLog[]
  schemaActivity  SchemaActivity[]
  botResponses   BotResponse[]
  polls  Poll[]
  uploadedFiles  UploadedFile[] @relation("Server")
  pollVotes PollVote[]
  forms    Form[]
  formResponse  formResponse[]
  spreadsheets  Spreadsheets[]
  tables        Table[]
  spreadsheetManager SpreadSheetManager[]
  tableRows  TableRow[]
  directMessages DirectMessage[]

}
model Section {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  name        String
  // d        Type @default(public)
  createdBy   String @db.ObjectId
  createdUser  User? @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  serverId    String @db.ObjectId
  server      Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  channels    Channel[]
  tests       Test[]
  results     Result[]
  canvas   Canvas[]
  pinnedPost  PinnedPost[]
  saveLater  Later[]
  forums     Forums[]
  // forumsQuestions ForumQuestion[]
  messages   Message[]
  forumsResponses  ForumResponse[]
  TestChannels  TestChannel[]
  forumsChannel ForumsChannel[]
 channelManager      ChannelManager[] 
  canvasManager      canvasManager[] 
  forumManager      ForumManager[] 
  testChannelManager      TestChannelManager[] 
  drafts    Draft[]
  schemaActivity  SchemaActivity[]
  spreadsheets   Spreadsheets[]
  spreadsheetManager SpreadSheetManager[]

  // forums 
}
model ForumsChannel {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  name        String
  description String ? 
  type        Type @default(public)
  createdBy   String @db.ObjectId
  createdMember  Member? @relation("CreatedForum", fields: [createdBy], references: [id],  onDelete: Cascade)
  isEveryonePost Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  serverId    String @db.ObjectId
  server      Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId    String @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  memberIds  String[] @db.ObjectId
  Members    Member[] @relation("Members", fields: [memberIds], references: [id])
 
   whoCanUpdateForums           SchemaRole @default(manager)
  whoCanMakePublicToPrivate    SchemaRole @default(manager)
  whoCanCreatePost             SchemaRole @default(manager)
  whoCanManagePost             SchemaRole @default(manager)
  whoCanUploadMediaInComment   SchemaRole @default(member)
  whoCanDeletePost             SchemaRole @default(manager)
  whoCanComment                SchemaRole @default(member)
  whoCanManageMember           SchemaRole @default(manager)
  whoCanManageManager          SchemaRole @default(manager)

 
  Forums   Forums[]
  forumsResponse ForumResponse[]
  schemaActivity   SchemaActivity[]
  manager ForumManager?
}
model Forums {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  // fileUrl     String[]
  // subTitle    String?
  memberId      String @db.ObjectId
  member       Member?  @relation(fields:[memberId], references:[id],   onDelete: Cascade)
  serverId   String  @db.ObjectId
  server      Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId   String? @db.ObjectId
  section     Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  forumsChannelId   String @db.ObjectId
  ForumsChannel     ForumsChannel? @relation(fields: [forumsChannelId], references: [id],  onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

 
  // forumsQuestions ForumQuestion[]
  // responses    ForumsResponse[]
  responses ForumResponse[]
}

model ForumResponse {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  content      String
  contentText  String?
  fileUrl    String[] @db.ObjectId
  uploadedFiles UploadedFile[] 
  repliedResponseId  String? @db.ObjectId
  repliedResponse    ForumResponse?  @relation("RepliedResponse", fields: [repliedResponseId], references: [id], onDelete:NoAction, onUpdate:NoAction)
  forwardedMessages   ForumResponse[] @relation("RepliedResponse")

  forumsChannelId String? @db.ObjectId
  forumsChannel   ForumsChannel?  @relation(fields:[forumsChannelId], references: [id])
  forumsId     String? @db.ObjectId
  forums       Forums? @relation(fields: [forumsId], references: [id], onDelete:Cascade)

  createdBy   String? @db.ObjectId
  member Member? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  serverId String @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  sectionId String @db.ObjectId
  section Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
  pollId      String? @db.ObjectId
  polls       Poll? @relation(fields: [pollId], references: [id])
  Reactions   Reaction[]
  pollVotes PollVote[]

}





model Channel {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  name        String
  description String ? 
  type        Type @default(public)
  createdBy   String @db.ObjectId
  createdMember Member? @relation("CreatedChannel", fields: [createdBy], references: [id])
  // createdUser  User? @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  serverId    String? @db.ObjectId
  server      Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId    String? @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  sendMsg    Boolean? @default(true)
  memberIds  String[] @db.ObjectId
  Members    Member[] @relation("Members", fields: [memberIds], references: [id])


  whoCanReadMessage           SchemaRole @default(member)
  whoCanSendMessage           SchemaRole @default(member)
  whoCanMakePublicToPrivate   SchemaRole @default(admin)
  whoCanUploadMedia           SchemaRole @default(member)
  whoCanUpdateChannel         SchemaRole @default(manager)
  whoCanManageManager         SchemaRole @default(manager)
  whoCanManageMember          SchemaRole @default(member)
  whoCanDeleteMessage         SchemaRole @default(manager)
  whoCanCreateForms           SchemaRole @default(member)
  whoCanCreatePolls           SchemaRole @default(member)
  whoCanPinnedPost            SchemaRole @default(member)



 
  messages   Message[]
  pinnedPost  PinnedPost[]
  saveLater  Later[]
  Threads    Threads[]
  manager ChannelManager?
  Drafts    Draft[]
  schemaActivity  SchemaActivity[]
  // Reactions  Reaction[]
}
model ChannelManager {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  channelId     String @db.ObjectId @unique
  channel      Channel @relation(fields: [channelId], references: [id])
  memberIds     String[] @db.ObjectId
  member        Member[] @relation(fields: [memberIds], references: [id])
  serverId       String @db.ObjectId
  server        Server? @relation(fields: [serverId],references: [id])
  sectionId    String? @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model canvasManager {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  canvasId     String @db.ObjectId @unique
  canvas      Canvas @relation(fields: [canvasId], references: [id])
  memberIds     String[] @db.ObjectId
  member        Member[] @relation(fields: [memberIds], references: [id])
  serverId       String @db.ObjectId
  server        Server? @relation(fields: [serverId],references: [id])
  sectionId    String? @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model TestChannelManager {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  testChannelId     String @db.ObjectId @unique
  testChannel      TestChannel @relation(fields: [testChannelId], references: [id])
  memberIds     String[] @db.ObjectId
  member        Member[] @relation(fields: [memberIds], references: [id])
  serverId       String @db.ObjectId
  server        Server? @relation(fields: [serverId],references: [id])
  sectionId    String? @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
}
model ForumManager {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  forumId     String @db.ObjectId @unique
  Forum      ForumsChannel @relation(fields: [forumId], references: [id])
  memberIds     String[] @db.ObjectId
  member        Member[] @relation(fields: [memberIds], references: [id])
  serverId       String @db.ObjectId
  server        Server? @relation(fields: [serverId],references: [id])
  sectionId    String? @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Canvas {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  title String
  description String?
  createdBy  String @db.ObjectId
  createdMember  Member? @relation("CreatedCanvas", fields: [createdBy], references: [id],  onDelete: Cascade)
  // createdUser  Member @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  isEveryonePost Boolean @default(true)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId  String @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  type        Type @default(public)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberIds  String[] @db.ObjectId
  Members    Member[] @relation("Members", fields: [memberIds], references: [id])
  
  
  whoCanUpdateCanvas          SchemaRole @default(manager)
  whoCanMakePublicToPublic    SchemaRole @default(manager)
  whoCanCreateNote            SchemaRole @default(member)
  whoCanManageNote            SchemaRole @default(manager)
  whoCanUploadMediaInComment   SchemaRole @default(member)
  whoCanDeleteNote             SchemaRole @default(manager)
  whoCanComment                SchemaRole @default(member)
  whoCanUpdateNote             SchemaRole @default(manager)
  whoCanManageMember           SchemaRole @default(manager)
  whoCanManageManager          SchemaRole @default(manager)
  


  
  
  notes     Note[]
  noteComments NoteComment[]
  schemaActivity  SchemaActivity[]
  manager canvasManager?
}
model Note {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  title String
  content String?
  createdBy  String @db.ObjectId
  createdUser  Member? @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  canvasId String? @db.ObjectId
  canvas Canvas? @relation(fields: [canvasId], references: [id], onDelete:Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commenting  Boolean @default(true)
  canEveryoneUpdate Boolean @default(false)
  comments NoteComment[]

}

model NoteComment {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  content     String
  fileUrl    String[] @db.ObjectId
  uploadedFiles UploadedFile[] 
  noteId     String? @db.ObjectId
  note       Note? @relation(fields: [noteId], references: [id], onDelete:Cascade)
  canvasId     String? @db.ObjectId
  canvas       Canvas? @relation(fields: [canvasId], references: [id], onDelete:Cascade)
  createdBy   String? @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  serverId String @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  // isDeleted Boolean @default(false)
  isUpdated Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
}



model Member {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  // serverRole  MemberRole @default(guest)
  role   MemberRole @default(guest)
  region  String?
  language  String? @default("English")
  userId  String @db.ObjectId
  user  User? @relation(fields: [userId], references: [id],  onDelete: Cascade)

  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)

  channelIds String[] @db.ObjectId
  channels  Channel[] @relation("Members" ,fields: [channelIds], references: [id])

  createdChannels Channel[] @relation("CreatedChannel")

  canvasIds String[] @db.ObjectId
  canvases  Canvas[] @relation("Members", fields: [canvasIds], references: [id])
  createdCanvas  Canvas[] @relation("CreatedCanvas")

  forumsChannelIds String[] @db.ObjectId
  forumChannels  ForumsChannel[] @relation("Members", fields: [forumsChannelIds], references: [id])

  createdForumChannels ForumsChannel[] @relation("CreatedForum")
  createdSpreadsheets Spreadsheets[] @relation("Spreadsheets")

  spreadsheetIds   String[] @db.ObjectId
  spreadsheets  Spreadsheets[] @relation("Members", fields: [spreadsheetIds], references: [id])

  testChannelIds String[] @db.ObjectId
  testChannels  TestChannel[] @relation("Members", fields: [testChannelIds], references: [id])
  createdTestChannels TestChannel[] @relation("CreatedTestChannel")
  groupIds String[] @db.ObjectId
  groups   Group[] @relation("Members", fields: [groupIds], references: [id])
  createdGroups Group[] @relation("CreatedGroup")
  managedChannelId     String[] @db.ObjectId
  managedChannel      ChannelManager[] @relation(fields: [managedChannelId], references: [id])
  managedCanvasId     String[] @db.ObjectId
  managedCanvas      canvasManager[] @relation(fields: [managedCanvasId], references: [id])
  
  managedForumId     String[] @db.ObjectId
  managedForums      ForumManager[] @relation(fields: [managedForumId], references: [id])

  managedSpreadsheetId   String[] @db.ObjectId
  managedSpreadsheet     SpreadSheetManager[] @relation(fields: [managedSpreadsheetId], references: [id])


  managedTestChannelId     String[] @db.ObjectId
  managedTestChannel      TestChannelManager[] @relation(fields: [managedTestChannelId], references: [id])

  managedTableRowId   String[] @db.ObjectId
  managedTableRow     TableRowData [] @relation("AssignedMember", fields: [managedTableRowId], references: [id])


  //  managedTableRowId   String[] @db.ObjectId
  // managedTableRow     TableRowData[] @relation("AssignedMember")
  respondentRowId      String[] @db.ObjectId
  respondentTableRowData     TableRowData[] @relation("Respondent", fields: [respondentRowId], references: [id])


  messages Message[]
  directMessages DirectMessage[]
  navigations   String[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")      
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests      Test[]
  results     Result[]
  pinnedPost  PinnedPost[]
  saveLater   Later[]
  threads     Threads[]
  questions   Question[]
  forums      Forums[]
  Reactions   Reaction[]
  Mentions   Mention[]
  CreatedMentions Mention[] @relation("CreatedMentionMember")
  // forumsQuestions ForumQuestion[]
  forumResponse ForumResponse[]
  Notes     Note[]
  Drafts    Draft[]
  noteComments NoteComment[]
  testResponse Response[]
  activityLogs ActivityLog[]
  schemaActivity  SchemaActivity[] @relation("CreatedBy")
  removedSchemaActivity  SchemaActivity[] @relation("RemovedMember")
  BotResponses   BotResponse[]
  uploadedFiles  UploadedFile[]
  polls   Poll[]
  pollVotes PollVote[]
  forms   Form[]
  formFields FormField[]
  formResponses formResponse[]
  formFieldResponses FormFieldResponse[]
  tables    Table[]
  tableColumns TableColumn[]
  tableRowComment TableRowComments[]
  // tableRowData TableRowData[]
  // TestChanneƒls  TestChannel[]
  // NoteContent NoteContent[]
  @@index([userId])
  @@index([serverId])
    
}
model Message {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  content     String?
  contentText  String?
  // fileUrl    String[]
  fileUrl    String[] @db.ObjectId
  uploadedFiles UploadedFile[] 
  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  // scheduleTime    DateTime @default(now())
  channelId String? @db.ObjectId
  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sectionId    String? @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id], onDelete:Cascade)
  serverId String? @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forwardedMessageId  String? @db.ObjectId
  forwardedMessage    Message?  @relation("ForwardedMessages", fields: [forwardedMessageId], references: [id], onDelete:NoAction, onUpdate:NoAction)
  forwardedMessages   Message[] @relation("ForwardedMessages")

  // forwardedThreadId String? @db.ObjectId
  // forwardedThread Threads? @relation("FowardedThreads", fields: [forwardedThreadId], references: [id])
  pollId    String? @db.ObjectId
  poll      Poll? @relation(fields: [pollId], references: [id])
  formId    String? @db.ObjectId
  form      Form? @relation(fields: [formId], references: [id])
  forwardedDirectMessages DirectMessage[]

  pollVotes PollVote[]
  pinnedPost  PinnedPost[]
  saveLater  Later[]
  threads    Threads[]   
  Reactions   Reaction[]
  Mentions   Mention[]
  @@index([channelId])
  @@index([memberId])
}
model Reaction {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  messageId    String? @db.ObjectId
  message      Message? @relation(fields: [messageId], references: [id], onDelete:Cascade)
  directMessageId String? @db.ObjectId
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id], onDelete:Cascade)
  threadId     String? @db.ObjectId
  thread       Threads? @relation(fields: [threadId], references: [id])
  forumResponseId     String? @db.ObjectId
  forumResponse       ForumResponse? @relation(fields: [forumResponseId], references: [id], onDelete:Cascade)

  createdBy   String @db.ObjectId
  member Member? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  serverId String @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  content     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
}
model Threads {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  content     String
  contentText  String?
  fileUrl    String[] @db.ObjectId
  uploadedFiles UploadedFile[] 
  messageId    String? @db.ObjectId
  message      Message? @relation( fields: [messageId], references: [id], onDelete:Cascade)
  directMessageId  String? @db.ObjectId
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id])
  channelId    String? @db.ObjectId
  channel Channel? @relation(fields: [channelId], references: [id], onDelete:Cascade)
  // forumsChannelId String? @db.ObjectId
  // forumsChannel   ForumsChannel?  @relation(fields:[forumsChannelId], references: [id])
  // forumsId     String? @db.ObjectId
  // forums       Forums? @relation(fields: [forumsId], references: [id], onDelete:Cascade)
 
  createdBy   String? @db.ObjectId
  member Member? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  serverId String @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)

  pinnedPost    PinnedPost[]   
  later        Later[]
  Reactions     Reaction[]
  // forwarededMessage Message[]


}
model Conversation {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  memberOneId String @db.ObjectId
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.ObjectId
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)



  directMessages DirectMessage[]
  Drafts   Draft[]
  pinnedPosts PinnedPost[]
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}
model DirectMessage {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  content String?
  contentText  String?
  fileUrl String[]
  uploadedFiles UploadedFile[] 
  memberId String @db.ObjectId
  member Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serverId  String @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id])
  conversationId String @db.ObjectId
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  forwardedMessageId  String? @db.ObjectId
  forwardedMessage  Message? @relation(fields: [forwardedMessageId], references: [id])

  forwardedDirectMessageId  String? @db.ObjectId
  forwardedDirectMessage    DirectMessage?  @relation("ForwardedDirectMessages", fields: [forwardedDirectMessageId], references: [id], onDelete:NoAction, onUpdate:NoAction)
  forwardedMessages   DirectMessage[] @relation("ForwardedDirectMessages")


  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pollId    String? @db.ObjectId
  poll      Poll? @relation(fields: [pollId], references: [id])
  formId    String? @db.ObjectId
  form      Form? @relation(fields: [formId], references: [id])


  pollVotes PollVote[]
  pinnedPost  PinnedPost[]
  saveLater  Later[]
  threads    Threads[]   
  Reactions   Reaction[]

  @@index([memberId])
  @@index([conversationId])
}
model TestChannel {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  name String 
  description String?
  type Type @default(public)
  createdBy  String @db.ObjectId
  createdMember  Member? @relation("CreatedTestChannel",fields: [createdBy], references: [id],  onDelete: Cascade)
  isEveryoneCreate Boolean @default(true)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId  String @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)

  memberIds  String[] @db.ObjectId
  Members    Member[] @relation("Members", fields: [memberIds], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  whoCanUpdateTestChannel      SchemaRole @default(manager)
  whoCanMakePublicToPrivate    SchemaRole @default(manager)
  whoCanCreateTest             SchemaRole @default(member)
  whoCanManageTest             SchemaRole @default(manager)
  whoCanGiveTest               SchemaRole @default(member)
  whoCanManageMember           SchemaRole @default(manager)
  whoCanManageManager          SchemaRole @default(manager)





  Tests     Test[]
  questions Question[]
  Results  Result[]
  schemaActivity SchemaActivity[]
  manager TestChannelManager?
  
}
model Test {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  name String 
  description String?
  createdBy  String? @db.ObjectId
  createdUser  Member? @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId  String @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  testChannelId  String @db.ObjectId
  testChannel  TestChannel? @relation(fields: [testChannelId], references: [id],  onDelete: Cascade)
  time    Int
  level   Level @default(easy)
  totalResponse Int @default(0)
  fullMarks   Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  activated Boolean @default(false)
  passmarks Int @default(0)
  questions Question[]
  Results  Result[]
  responses Response[]
}
model Question {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  title  String
  options String[]
  answer  String[]
  qType   String
  marks    Int  @default(1)
  explanation String?
  testId  String @db.ObjectId
  test  Test @relation(fields: [testId], references: [id],  onDelete: Cascade)
  testChannelId  String @db.ObjectId
  testChannel  TestChannel? @relation(fields: [testChannelId], references: [id],  onDelete: Cascade)

  createdBy  String @db.ObjectId
  createdUser  Member @relation(fields: [createdBy], references: [id],  onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  results Response[]
}
model Result {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  name String
  memberId  String @db.ObjectId
  member  Member? @relation(fields: [memberId], references: [id],  onDelete: Cascade)
  fullMarks Int @default(0)
  obtainMarks  Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  serverId   String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId   String @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  submitted Boolean @default(false)
  submitTime DateTime? 
  attempt Int @default(1)
  //  Boolean @default(false)
  isUserDeleted Boolean @default(false)
  isAdminDeleted Boolean @default(false)
  testId  String @db.ObjectId
  test    Test?  @relation(fields: [testId], references: [id], onDelete:Cascade)
  testChannelId  String @db.ObjectId
  testChannel  TestChannel? @relation(fields: [testChannelId], references: [id],  onDelete: Cascade)
  currentState Int @default(0)
  response   Response[]

}
model Response {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  questionId  String @db.ObjectId
  question  Question? @relation(fields: [questionId], references: [id],  onDelete: Cascade)
  resultId  String @db.ObjectId
  result  Result? @relation(fields: [resultId], references: [id],  onDelete: Cascade)
  testId   String @db.ObjectId
  test  Test? @relation(fields: [testId], references: [id],  onDelete: Cascade)
  createdBy  String @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answer   String[]
  options String[]
  qMarks  Int
  marks   Int
}
model PinnedPost {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  createdBy  String @db.ObjectId
  createdUser  Member? @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  messageId  String? @db.ObjectId
  message  Message? @relation(fields: [messageId], references: [id],  onDelete: Cascade)
  threadId  String? @db.ObjectId
  thread  Threads? @relation(fields: [threadId], references: [id],  onDelete: Cascade)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId  String? @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  channelId  String? @db.ObjectId
  channel  Channel? @relation(fields: [channelId], references: [id],  onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  directMessageId  String? @db.ObjectId
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id])
  conversationId  String? @db.ObjectId
  conversation   Conversation? @relation(fields: [conversationId], references: [id])

}
model Later {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  createdBy  String @db.ObjectId
  time   DateTime?
  createdUser  Member? @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId  String? @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)
  messageId  String? @db.ObjectId
  message  Message? @relation(fields: [messageId], references: [id],  onDelete: Cascade)
  directMessageId  String? @db.ObjectId
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id])
  threadId  String? @db.ObjectId
  threads  Threads? @relation(fields: [threadId], references: [id],  onDelete: Cascade)
  channelId  String? @db.ObjectId
  channel  Channel? @relation(fields: [channelId], references: [id],  onDelete: Cascade)
  status  LaterStatus @default(progress)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  handle String
  description String?
  createdBy    String? @db.ObjectId
  createdUser  Member? @relation("CreatedGroup", fields: [createdBy], references: [id])
  serverId    String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id])
  isDeactivated Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberIds  String[]  @db.ObjectId
  members Member[] @relation("Members", fields: [memberIds], references: [id])
  mentions Mention[]
}
model Mention {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  groupId String? @db.ObjectId
  group Group? @relation(fields:[groupId] ,references:[id])
  memberId   String? @db.ObjectId
  member     Member? @relation(fields: [memberId] ,references: [id])
  messageId   String @db.ObjectId
  message     Message? @relation(fields: [messageId], references: [id])
  createdBy String? @db.ObjectId
  createdMember Member? @relation("CreatedMentionMember", fields: [createdBy] ,references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}




model Draft {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  content     String
  contentText  String?
  fileUrl    String[]
  uploadedFiles UploadedFile[] 
  createdBy String @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  channelId String? @db.ObjectId
  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  serverId String? @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  sectionId String? @db.ObjectId
  Section Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  conversationId String? @db.ObjectId
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  isDeleted  Boolean @default(false)
  isSent   Boolean @default(false)
  ScheduledDate DateTime? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model ActivityLog {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  action     String?
  name       String?
  type       String?
  schemaType  String?

  createdBy String @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  isDeleted  Boolean @default(false)
  serverId String? @db.ObjectId
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model SchemaActivity {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  message             String?
  activityType        String
  schemaType          String 
  name                String?
  oldData             String?
  newData             String?
  memberId            String? @db.ObjectId
  member              Member? @relation("CreatedBy", fields: [memberId], references: [id])
  memberId2           String? @db.ObjectId
  member2             Member? @relation("RemovedMember", fields: [memberId2], references: [id])
  
  channelId           String? @db.ObjectId
  channel             Channel? @relation(fields: [channelId], references: [id])

  forumChannelId      String? @db.ObjectId
  forumChannel        ForumsChannel? @relation(fields: [forumChannelId], references: [id])

  canvasId            String? @db.ObjectId
  canvas              Canvas? @relation(fields: [canvasId], references: [id])

  testChannelId       String? @db.ObjectId
  testChannel         TestChannel? @relation(fields:[testChannelId] ,references :[id])

  spreadsheetId            String? @db.ObjectId
  spreadsheet              Spreadsheets? @relation(fields: [spreadsheetId], references: [id])


  sectionId           String? @db.ObjectId
  section             Section? @relation(fields:[sectionId] ,references :[id])

  serverId            String  @db.ObjectId
  server              Server?  @relation(fields: [serverId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

}


model BotResponse {
  id             String   @id @default(auto())  @map("_id") @db.ObjectId
  triggeredText     String
  responseText      String
  responseFileUrl   String[]
  uploadedFiles UploadedFile[] 
  triggeredType    BotTriggeredType @default(specificText)
  createdBy        String @db.ObjectId
  createdMember    Member?  @relation(fields: [createdBy], references: [id])
  serverId         String @db.ObjectId
  server           Server?  @relation(fields:[serverId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt


}



model UploadedFile {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String 
  type          String?
  fileType      String
  size          Int
  publicUrl     String
  createdAt     DateTime @default(now())
  createdBy     String? @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id])
  serverId      String? @db.ObjectId
  server        Server? @relation("Server", fields: [serverId], references: [id])
  isDeleted     Boolean @default(false)
  thumbnail     String?
  convertedUrl  String?
  messageId     String? @db.ObjectId
  message       Message? @relation(fields: [messageId], references: [id])

  forumResponseId     String? @db.ObjectId
  forumResponse       ForumResponse? @relation(fields: [forumResponseId], references: [id])

  botResponseId String? @db.ObjectId
  botResponse   BotResponse? @relation(fields: [botResponseId], references: [id])
  directMessageId String? @db.ObjectId
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id])
  draftId       String? @db.ObjectId
  draft         Draft?   @relation(fields: [draftId], references: [id])
  threadId      String? @db.ObjectId
  thread       Threads? @relation(fields: [threadId], references: [id])
  fieldResponseId   String? @db.ObjectId
  fieldResponse     FormFieldResponse? @relation(fields: [fieldResponseId], references: [id])
  displayPictures Server[] @relation("DisplayPictures")
  coverPictures Server[] @relation("CoverPictures") 
  rowCommentId   String? @db.ObjectId
  rowComment   TableRowComments? @relation(fields: [rowCommentId], references: [id])
  tableRowDataId String? @db.ObjectId
  tableRowData   TableRowData? @relation(fields: [tableRowDataId], references: [id])
  noteCommentId  String? @db.ObjectId
  noteComment    NoteComment? @relation(fields: [noteCommentId], references: [id])

  userId   String? @db.ObjectId
  user     User? @relation(fields: [userId], references: [id])


}




model Poll {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  answerType    PollType @default(singleChoice)
  expiryDate    DateTime?
  anonymous     Boolean @default(false)
  createdBy     String @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id])
  serverId      String @db.ObjectId
  server        Server? @relation(fields: [serverId], references: [id])
  // messageId     String @db.ObjectId
  // message       Message @relation(fields: [messageId], references: [id])
  // forumResponseId       String @db.ObjectId
  // forumId        ForumResponse @relation(fields: [forumResponseId], references: [id])
  directMessage DirectMessage[]
  message Message[]
  forumResponse ForumResponse[]
  votes   PollVote[]


}
model PollVote {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  vote          String[]
  createdBy     String @db.ObjectId
  createdMember  Member? @relation(fields: [createdBy], references: [id])
  serverId      String @db.ObjectId
  server        Server? @relation(fields: [serverId], references: [id])
  messageId     String? @db.ObjectId
  message       Message? @relation(fields: [messageId], references: [id])
  directMessageId  String? @db.ObjectId
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id])
  forumResonseId     String? @db.ObjectId
  forumResponse       ForumResponse? @relation(fields: [forumResonseId], references: [id])

  pollId         String @db.ObjectId
  poll           Poll?   @relation(fields: [pollId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt   DateTime @updatedAt
}

model Form {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String 
  description   String?
  createdBy     String @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id])

  serverId      String @db.ObjectId
  server        Server? @relation(fields: [serverId], references: [id])


  expiryDate    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  formFields    FormField[]
  messages      Message[]
  directMessage      DirectMessage[]
  formResponses formResponse[]
  formFieldResponse FormFieldResponse[]

}

model FormField {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  options       String[]
  fileType      String?
  fileCount     Int?
  fileMaxSize   Int?
  description   String?
  type          FieldType
  required      Boolean   @default(false)
  formId        String @db.ObjectId
  form          Form? @relation(fields: [formId], references: [id])
  createdBy     String @db.ObjectId
  createdMember Member? @relation(fields: [createdBy], references: [id])

  formFieldResponses FormFieldResponse[]


}


model formResponse {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  createdBy     String @db.ObjectId
  createdMember  Member? @relation(fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  formId        String @db.ObjectId
  form          Form? @relation(fields: [formId], references: [id])
  serverId      String @db.ObjectId
  server        Server? @relation(fields: [serverId], references: [id])
  formFieldResponses FormFieldResponse[]
}

model FormFieldResponse {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  fieldResponse   String[]
  files           UploadedFile[]
  formFieldType   FieldType
  formId          String @db.ObjectId
  form            Form? @relation(fields: [formId], references: [id])
  formFieldId     String @db.ObjectId
  formField       FormField? @relation(fields: [formFieldId], references: [id])
  formResponseId  String @db.ObjectId
  formResponse    formResponse? @relation(fields: [formResponseId], references: [id])
  createdBy       String @db.ObjectId
  createdMember   Member? @relation(fields: [createdBy], references: [id])

  @@unique([formFieldId, formResponseId, createdBy], name: "formFieldId_formResponseId_createdBy")

}




// spreadsheets 

model Spreadsheets {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  name String 
  description String?
  type Type @default(public)
  createdBy  String @db.ObjectId
  createdMember  Member? @relation("Spreadsheets",fields: [createdBy], references: [id],  onDelete: Cascade)
  // isEveryoneCreate Boolean @default(true)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  sectionId  String @db.ObjectId
  section  Section? @relation(fields: [sectionId], references: [id],  onDelete: Cascade)

  memberIds  String[] @db.ObjectId
  Members    Member[] @relation("Members", fields: [memberIds], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  whoCanUpdateSpreadsheets      SchemaRole @default(manager)
  whoCanMakePublicToPrivate     SchemaRole @default(manager)
  whoCanCreateTable             SchemaRole @default(member)
  whoCanManageTable             SchemaRole @default(manager)
  whoCanManageMember            SchemaRole @default(manager)
  whoCanManageManager           SchemaRole @default(manager)




  tables  Table[]
  manager SpreadSheetManager?
  tableColumns TableColumn[]
  tableRows TableRow[]
  schemaActivity SchemaActivity[]
  
}

model SpreadSheetManager {
  id           String      @id @default(auto()) @map("_id")  @db.ObjectId
  spreadsheetId     String @db.ObjectId @unique
  spreadsheet      Spreadsheets? @relation(fields: [spreadsheetId], references: [id])
  memberIds     String[] @db.ObjectId
  member        Member[] @relation(fields: [memberIds], references: [id])
  serverId       String @db.ObjectId
  server        Server? @relation(fields: [serverId],references: [id])
  sectionId    String? @db.ObjectId
  section      Section? @relation(fields: [sectionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
}


model Table {
  id   String   @id @default(auto()) @map("_id")  @db.ObjectId
  name String 
  description String?
  type   tableType @default(editable)
  createdBy  String? @db.ObjectId
  createdUser  Member? @relation(fields: [createdBy], references: [id],  onDelete: Cascade)
  serverId  String @db.ObjectId
  server  Server? @relation(fields: [serverId], references: [id],  onDelete: Cascade)
  spreadsheetId  String @db.ObjectId
  spreadsheet  Spreadsheets? @relation(fields: [spreadsheetId], references: [id],  onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tableColumns  TableColumn[]
  tableRows     TableRow[]
  tableRowData  TableRowData[]
  tableRowComments TableRowComments[]


}

model TableColumn {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  columnName String  
  columnDescription String?
  columnType  ColumnType @default(shortText)
  rowId    String @db.ObjectId
  row      TableRow? @relation(fields: [rowId], references: [id], onDelete:Cascade)
  tableId    String @db.ObjectId
  table      Table? @relation(fields: [tableId], references: [id], onDelete:Cascade)
  spreadSheetId  String @db.ObjectId
  spreadsheet    Spreadsheets? @relation(fields: [spreadSheetId], references: [id], onDelete:Cascade)
  createdBy  String @db.ObjectId
  createdUser  Member? @relation(fields: [createdBy], references: [id], onDelete:Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  restricted Boolean @default(false)
  tableRowData TableRowData[]
}

model TableRow {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  rowIndex Int?
  columns  TableColumn[]
  rowData  TableRowData[]
  tableId  String @db.ObjectId
  table   Table? @relation(fields: [tableId], references: [id])
  spreadSheetId  String @db.ObjectId
  spreadsheet    Spreadsheets? @relation(fields: [spreadSheetId], references: [id])
  serverId  String @db.ObjectId
  server    Server? @relation(fields: [serverId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  RowComments TableRowComments[]

}

model TableRowData {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  data String[]
  labels String[]
  assignedMemberIds   String[] @db.ObjectId
  assignedMember  Member[] @relation("AssignedMember", fields: [assignedMemberIds], references: [id])
  files    UploadedFile[]
  type     ColumnType @default(shortText)
  respondentId   String[] @db.ObjectId
  respondent Member[] @relation("Respondent", fields: [respondentId], references: [id])
  rowId  String @db.ObjectId
  row  TableRow? @relation(fields: [rowId], references: [id])
  columnId  String @db.ObjectId
  column  TableColumn? @relation(fields:[columnId], references: [id])
  tableId  String @db.ObjectId
  table   Table? @relation(fields: [tableId], references: [id], onDelete:Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TableRowComments {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  content  String? 
  fileUrl String[] @db.ObjectId
  files    UploadedFile[]
  tableRowId  String @db.ObjectId
  tableRow   TableRow? @relation(fields: [tableRowId], references: [id], onDelete:Cascade)
  tableId  String @db.ObjectId
  table   Table? @relation(fields: [tableRowId], references: [id], onDelete:Cascade)
  createdBy  String @db.ObjectId
  createdMember  Member? @relation(fields: [createdBy], references: [id], onDelete:Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}